//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Settings/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""ShootingRange"",
            ""id"": ""10a68ee6-5191-441a-9466-ac90838a273e"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""e7d4d44e-d025-4ea6-87f5-7662a89385a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootPos"",
                    ""type"": ""Value"",
                    ""id"": ""16275ae1-7d44-4501-869e-3c9424c3ab1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd6a8d0c-cb63-494a-b4e5-b07dd305133f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58f0585f-b397-42a6-a882-af149c69a7cd"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""754894f0-f3a6-4892-a6b5-b9b5cec28bfd"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0d4d89e-5727-401a-b497-c41aa8c5290e"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ShootingRange
        m_ShootingRange = asset.FindActionMap("ShootingRange", throwIfNotFound: true);
        m_ShootingRange_Shoot = m_ShootingRange.FindAction("Shoot", throwIfNotFound: true);
        m_ShootingRange_ShootPos = m_ShootingRange.FindAction("ShootPos", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ShootingRange
    private readonly InputActionMap m_ShootingRange;
    private IShootingRangeActions m_ShootingRangeActionsCallbackInterface;
    private readonly InputAction m_ShootingRange_Shoot;
    private readonly InputAction m_ShootingRange_ShootPos;
    public struct ShootingRangeActions
    {
        private @InputActions m_Wrapper;
        public ShootingRangeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_ShootingRange_Shoot;
        public InputAction @ShootPos => m_Wrapper.m_ShootingRange_ShootPos;
        public InputActionMap Get() { return m_Wrapper.m_ShootingRange; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootingRangeActions set) { return set.Get(); }
        public void SetCallbacks(IShootingRangeActions instance)
        {
            if (m_Wrapper.m_ShootingRangeActionsCallbackInterface != null)
            {
                @Shoot.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShoot;
                @ShootPos.started -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShootPos;
                @ShootPos.performed -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShootPos;
                @ShootPos.canceled -= m_Wrapper.m_ShootingRangeActionsCallbackInterface.OnShootPos;
            }
            m_Wrapper.m_ShootingRangeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ShootPos.started += instance.OnShootPos;
                @ShootPos.performed += instance.OnShootPos;
                @ShootPos.canceled += instance.OnShootPos;
            }
        }
    }
    public ShootingRangeActions @ShootingRange => new ShootingRangeActions(this);
    public interface IShootingRangeActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnShootPos(InputAction.CallbackContext context);
    }
}
